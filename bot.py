import os
from dotenv import load_dotenv
from aiogram import Bot, Dispatcher, executor, types
import checkpoints
import asyncio

check_points = checkpoints.get_points_data()
load_dotenv()
API_TOKEN = os.getenv('BOT_TOKEN')

bot = Bot(token=API_TOKEN)
dp = Dispatcher(bot)

# –•—Ä–∞–Ω–∏–ª–∏—â–µ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: —è–∑—ã–∫ –∏ –º–∞—Ä—à—Ä—É—Ç
user_data = {}

BASE_DIR = os.path.dirname(os.path.abspath(__file__))
default_comments = {
    "ru": ["–¢–æ—á–Ω–æ!", "–¢—ã –æ—à–∏–±—Å—è, –Ω–æ –Ω–∏—á–µ–≥–æ —Å—Ç—Ä–∞—à–Ω–æ–≥–æ"],
    "en": ["Yes!", "Sorry, but you didn't guess"],
    "es": ["Exacto!", "Lo siento, est√° vez no adivinaste"]
}

@dp.message_handler(commands=['start'])
async def start_handler(message: types.Message):
    keyboard = types.InlineKeyboardMarkup(row_width=3)
    keyboard.add(
        types.InlineKeyboardButton("–†—É—Å—Å–∫–∏–π üá∑üá∫", callback_data='lang_ru'),
        types.InlineKeyboardButton("English üá¨üáß", callback_data='lang_en'),
        types.InlineKeyboardButton("Espa√±ol üá™üá∏", callback_data='lang_es')
    )
    sent = await message.answer(
        "–ü—Ä–∏–≤–µ—Ç! –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ —è–∑—ã–∫ / Please choose your language / Por favor, elige tu idioma:",
        reply_markup=keyboard
    )


@dp.callback_query_handler(lambda c: c.data and c.data.startswith('lang_'))
async def language_chosen(callback_query: types.CallbackQuery):
    user_id = callback_query.from_user.id
    lang = callback_query.data.split('_')[1]

    user_data[user_id] = {'lang': lang}
    user_data[user_id]['checkpoint_index'] = 0
    user_data[user_id]['step_index'] = 0
    user_data[user_id]['character_index'] = -1

    # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–∞–º–∏ –≤—ã–±–æ—Ä–∞ —è–∑—ã–∫–∞
    try:
        await bot.delete_message(chat_id=callback_query.message.chat.id, message_id=callback_query.message.message_id)
    except Exception as e:
        print(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ: {e}")

    await bot.answer_callback_query(callback_query.id)

    greetings = {
        'ru': "–í—ã –≤—ã–±—Ä–∞–ª–∏ —Ä—É—Å—Å–∫–∏–π —è–∑—ã–∫. –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É–µ–º –Ω–∞ –Ω–∞—à–µ–º —Å–≤–∞–¥–µ–±–Ω–æ–º –∫–≤–µ—Å—Ç–µ!\n–í—ã–±–µ—Ä–∏—Ç–µ –º–∞—Ä—à—Ä—É—Ç:",
        'en': "You chose English. Welcome to our wedding quest!\nPlease choose your route:",
        'es': "Has elegido espa√±ol. ¬°Bienvenido a nuestra b√∫squeda de boda!\nPor favor, elige tu ruta:"
    }
    routes_buttons = {
        'ru': ["–ú–∞—Ä—à—Ä—É—Ç 1", "–ú–∞—Ä—à—Ä—É—Ç 2"],
        'en': ["Route 1", "Route 2"],
        'es': ["Ruta 1", "Ruta 2"]
    }

    labels = routes_buttons.get(lang, routes_buttons['en'])
    keyboard = types.InlineKeyboardMarkup(row_width=2)
    keyboard.add(
        types.InlineKeyboardButton(labels[0], callback_data='route_1'),
        types.InlineKeyboardButton(labels[1], callback_data='route_2')
    )

    await bot.send_message(user_id, greetings.get(lang, "Hello!\nChoose your route:"), reply_markup=keyboard)


@dp.callback_query_handler(lambda c: c.data and c.data.startswith('route_'))
async def route_chosen(callback_query: types.CallbackQuery):
    user_id = callback_query.from_user.id
    route = callback_query.data.split('_')[1]

    # –î–æ–±–∞–≤–ª—è–µ–º –º–∞—Ä—à—Ä—É—Ç –∫ –¥–∞–Ω–Ω—ã–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    if user_id in user_data:
        user_data[user_id]['route'] = route
    else:
        user_data[user_id] = {'route': route}

    # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –≤—ã–±–æ—Ä–æ–º –º–∞—Ä—à—Ä—É—Ç–∞
    try:
        await bot.delete_message(chat_id=callback_query.message.chat.id, message_id=callback_query.message.message_id)
    except Exception as e:
        print(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ: {e}")

    await bot.answer_callback_query(callback_query.id)

    messages = {
        'ru': f"–û—Ç–ª–∏—á–Ω–æ! –í—ã –≤—ã–±—Ä–∞–ª–∏ –º–∞—Ä—à—Ä—É—Ç {route}. –ù–∞—á–Ω–µ–º!",
        'en': f"Great! You chose route {route}. Let's go!",
        'es': f"¬°Genial! Has elegido la ruta {route}. ¬°Empezamos!"
    }

    lang = user_data.get(user_id, {}).get('lang', 'en')
    await bot.send_message(user_id, messages.get(lang, messages['en']))
    await show_checkpoint(user_id)


# –§—É–Ω–∫—Ü–∏–∏ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤—Å–µ—Ö –≤–æ–∑–º–æ–∂–Ω—ã—Ö —à–∞–≥–æ–≤
# –û—Ç–ø—Ä–∞–≤–∫–∞ –ª—é–±–æ–≥–æ —Ç–µ–∫—Å—Ç–∞ - title, intro, here_text, after_story_text,  next_btn_text
async def send_message(step, user_id, lang, cp):
    if step in cp:
        await bot.send_message(user_id, cp[step][lang])


# –û—Ç–ø—Ä–∞–≤–∫–∞ –ª—é–±–æ–π —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ –∏–∑ –ø–∞–ø–∫–∏ img - story_img_path, question_img_path, here_img_path, local_question_img_path
async def send_img(img, cp, user_id):
    img_path = cp.get(img + "_img_path")
    if img_path:
        img_path = os.path.join(BASE_DIR, "img", cp[img + "_img_path"])
        await bot.send_photo(user_id, photo=open(img_path, 'rb'))


# –û—Ç–ø—Ä–∞–≤–∫–∞ —Å—Ç–∏–∫–µ—Ä–∞ —Å –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–º - –ø–æ —Å–ø–∏—Å–∫—É
async def send_character(cp, user_id):
    characters = cp.get("characters")
    user_data[user_id]["character_index"] += 1
    i = user_data[user_id]["character_index"]
    print("character", characters[i])
    if characters and -1 < i < len(characters):
        print(characters[i])
        sticker_id = checkpoints.get_sticker_id(characters[i])
        try:
            await bot.send_sticker(chat_id=user_id, sticker=sticker_id)
        except Exception as e:
            print(f"[–û—à–∏–±–∫–∞] –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å—Ç–∏–∫–µ—Ä {sticker_id}: {e}")


# –û—Ç–ø—Ä–∞–≤–∫–∞ –∏—Å—Ç–æ—Ä–∏–∏ - audio_path + story_img_path + story_text
async def send_story(user_id, lang, cp, route, index):
    if "story_text" in cp:
        if "audio_path" in cp and cp["audio_path"].get(lang):
            audio_path = os.path.join(BASE_DIR, "mp3", cp["audio_path"][lang])
            await bot.send_audio(user_id, audio=open(audio_path, 'rb'))
            await send_img("story", cp, user_id)
            await asyncio.sleep(5)
        elif "story_img_path" in cp:
            await send_img("story", cp, user_id)
        await bot.send_message(user_id, cp["story_text"][lang])
        await asyncio.sleep(10)


# –í–æ–ø—Ä–æ—Å –ø–æ –∏—Å—Ç–æ—Ä–∏–∏ –∏–ª–∏ –ª–æ–∫–∞—Ü–∏–∏, local = "" / "local" - question + options + question_img_path
async def send_question(user_id, lang, route, cp, index, local=""):
    q = "question"
    op = "options"
    if local:
        q = local + "_" + q
        op = local + "_" + op
    if q+"_intro" in cp:
        await bot.send_message(user_id, cp[q+"_intro"][lang])
    if q in cp and op in cp:
        await asyncio.sleep(3)
        keyboard = types.InlineKeyboardMarkup()

        for i, option in enumerate(cp[op][lang]):
            try:
                keyboard.add(types.InlineKeyboardButton(option, callback_data=f"answer_{route}_{index}_{i}_{local}"))
            except Exception as e:
                print("–ù–µ —É–¥–∞–ª–æ—Å—å –¥–æ–±–∞–≤–∏—Ç—å –∫–Ω–æ–ø–∫—É", e)
        try:
            await send_img(q, cp, user_id)
            await bot.send_message(user_id, cp[q][lang], reply_markup=keyboard)
            return True
        except Exception as e:
            print("–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∫–Ω–æ–ø–∫–∏", e)
    elif q in cp:
        print(q, cp[q][lang])
        try:
            await bot.send_message(user_id, cp[q][lang])
            return False
        except Exception as e:
            print("error question without options", e)


# –ö–Ω–æ–ø–∫–∞ "–Ø –∑–¥–µ—Å—å"
async def send_here_btn(user_id, lang, route, index):
    keyboard = types.InlineKeyboardMarkup()
    keyboard.add(types.InlineKeyboardButton({
                                                'ru': "–Ø –∑–¥–µ—Å—å",
                                                'en': "I'm here",
                                                'es': "Aqu√≠ estoy"
                                            }[lang], callback_data=f"arrived_{route}_{index}"))

    await bot.send_message(user_id, "üîò", reply_markup=keyboard)


# –∫–Ω–æ–ø–∫–∞ "–ø–æ—à–ª–∏ –¥–∞–ª—å—à–µ"
async def send_next_btn(user_id, lang, route, index):
    kb = types.InlineKeyboardMarkup()
    kb.add(types.InlineKeyboardButton({
        'ru': "–ü–æ—à–ª–∏ –¥–∞–ª—å—à–µ",
        'en': "Let's go",
        'es': "Sigamos"
    }[lang], callback_data=f"next_{route}_{int(index) + 1}"))
    await bot.send_message(user_id, "üëâ", reply_markup=kb)


# –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ —à–∞–≥–æ–≤
async def do_step(step, user_id, lang, route, cp, index):
    # –ó–∞–¥–∞–Ω–∏—è –∏ –∏—Å—Ç–æ—Ä–∏—è
    if step == "question":
        q = await send_question(user_id, lang, route, cp, index)
        return q
    elif step == "local_question":
        try:
            q = await send_question(user_id, lang, route, cp, index, "local")
            return q
        except Exception as e:
            print("do_step, local question", e)
    elif step == "story":
        await send_story(user_id, lang, cp, route, index)

    # –û—Ç–ø—Ä–∞–≤–∫–∞ –ª—é–±–æ–≥–æ —Ç–µ–∫—Å—Ç–∞ - title, intro, here_text, after_story_text, question_intro, next_btn_text
    elif step in ['title', 'intro', 'here_text', 'after_story_text', 'next_btn_text']:
        try:
            if step == "here_text":
                await asyncio.sleep(3)
            await send_message(step, user_id, lang, cp)
        except Exception as e:
            print(e)

    # –ö–Ω–æ–ø–∫–∏
    elif step == "here_btn":
        await send_here_btn(user_id, lang, route, index)
        return True
    elif step == "next_btn":
        try:
            await send_next_btn(user_id, lang, route, index)
            return True
        except Exception as e:
            print(e)

    # –æ—Ç–ø—Ä–∞–≤–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –∏ —Å—Ç–∏–∫–µ—Ä–æ–≤
    elif step == "here_img_path":
        try:
            await send_img("here", cp, user_id)
        except Exception as e:
            print("here img", e)
    elif step == "character":
        await send_character(cp, user_id)
    return False


# –§—É–Ω–∫—Ü–∏—è –≤—ã–±–æ—Ä–∞ –∫–ø
async def show_checkpoint(user_id):
    user = user_data[user_id]
    route = user['route']
    lang = user['lang']
    index = user.get('checkpoint_index', 0)
    steps = checkpoints.get_steps_orden(route, int(index))
    cp = check_points[route][index]
    stop = False
    print("show", index, steps)
    # –ò–¥–µ–º –ø–æ —à–∞–≥–∞–º –¥–æ –ø–µ—Ä–≤–æ–π –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ (–∑–∞–≥–∞–¥–∫–∞, –∑–∞–¥–∞–Ω–∏–µ –∏–ª–∏ –∫–Ω–æ–ø–∫–∞)
    for i in range(len(steps)):
        step = steps[i]
        user_data[user_id]['step_index'] = i
        stop = await do_step(step, user_id, lang, route, cp, index)
        if stop:
            break
    if not stop:
        await next_cp(user_id, lang, route, index+1)


# –ü–µ—Ä–µ—Ö–æ–¥ –∫ —Å–ª–µ–¥—É—é—â–µ–º—É –ö–ü
async def next_cp(user_id, lang, route, index):
    print("next", index)
    if index < len(check_points[route]):
        user_data[user_id]['checkpoint_index'] = index
        user_data[user_id]['character_index'] = -1
        user_data[user_id]['step_index'] = 0
        await show_checkpoint(user_id)
    else:
        await bot.send_message(user_id, {
            'ru': "üéâ –ö–≤–µ—Å—Ç –∑–∞–≤–µ—Ä—à—ë–Ω! –°–ø–∞—Å–∏–±–æ, —á—Ç–æ –ø—Ä–æ—à–ª–∏ –µ–≥–æ —Å –Ω–∞–º–∏!",
            'en': "üéâ Quest complete! Thank you for joining us!",
            'es': "üéâ ¬°B√∫squeda completada! ¬°Gracias por participar!"
        }[lang])


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ø –ó–î–ï–°–¨
@dp.callback_query_handler(lambda c: c.data.startswith("arrived_"))
async def arrived_handler(callback_query: types.CallbackQuery):
    _, route, index = callback_query.data.split("_")
    user_id = callback_query.from_user.id
    lang = user_data[user_id]['lang']
    steps = checkpoints.get_steps_orden(route, int(index))
    cp = check_points[route][int(index)]

    # –£–¥–∞–ª—è–µ–º –∫–Ω–æ–ø–∫—É
    await bot.delete_message(callback_query.message.chat.id, callback_query.message.message_id)
    await bot.answer_callback_query(callback_query.id)
    step_i = user_data[user_id]['step_index'] + 1
    print(step_i, len(steps))
    if step_i < len(steps):
        print("no")
        for i in range(step_i, len(steps)):
            step = steps[i]
            user_data[user_id]['step_index'] = i
            stop = await do_step(step, user_id, lang, route, cp, index)
            if stop:
                break
    else:
        try:
            await next_cp(user_id, lang, route, int(index)+1)
        except Exception as e:
            print(e)


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—Ç–≤–µ—Ç–æ–≤
@dp.callback_query_handler(lambda c: c.data.startswith("answer_"))
async def answer_handler(callback_query: types.CallbackQuery):
    _, route, index, selected, local = callback_query.data.split("_")
    index = int(index)
    user_id = callback_query.from_user.id
    lang = user_data[user_id]['lang']
    cp = check_points[route][index]
    steps = checkpoints.get_steps_orden(route, int(index))

    #await bot.delete_message(chat_id=callback_query.message.chat.id, message_id=callback_query.message.message_id)
    await bot.answer_callback_query(callback_query.id)
    selected = int(selected)
    ans = local + "_" + "answer" if local else "answer"
    ans_number = cp.get(ans)
    print(ans_number, ans)
    if ans_number:
        try:
            if selected == ans_number:
                await bot.send_message(user_id, default_comments[lang][0])
            else:
                await bot.send_message(user_id, default_comments[lang][1])
        except Exception as e:
            print("ans_number", e)
    else:
        ans_comments = ans + "_comments"
        comment = cp.get(ans_comments, {}).get(selected, {}).get(lang)
        print("comment", comment)
        if comment:
            try:
                await bot.send_message(user_id, comment)
            except Exception as e:
                print("comment", e)
    step_i = user_data[user_id]['step_index'] + 1
    print(step_i)
    await asyncio.sleep(3)
    if step_i < len(steps):
        for i in range(step_i, len(steps)):
            step = steps[i]
            user_data[user_id]['step_index'] = i
            stop = await do_step(step, user_id, lang, route, cp, index)
            if stop:
                break
    else:
        await next_cp(user_id, lang, route, int(index) + 1)


# –ü–µ—Ä–µ—Ö–æ–¥ –∫ —Å–ª–µ–¥—É—é—â–µ–º—É –ö–ü
@dp.callback_query_handler(lambda c: c.data.startswith("next_"))
async def next_checkpoint(callback_query: types.CallbackQuery):
    _, route, index = callback_query.data.split("_")
    index = int(index)
    user_id = callback_query.from_user.id
    lang = user_data[user_id]['lang']

    await bot.delete_message(chat_id=callback_query.message.chat.id, message_id=callback_query.message.message_id)
    await bot.answer_callback_query(callback_query.id)

    await next_cp(user_id, lang, route, index)


if __name__ == '__main__':
    executor.start_polling(dp, skip_updates=True)
